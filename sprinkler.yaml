################################################################################
#                                 SPRINKLER                                    #
#Pinout: https://circuits4you.com/wp-content/uploads/2018/12/ESP32-Pinout.jpg  #
#Solenoid: Bistable 9v
#                                                                              #
################################################################################

substitutions:
  green_button: GPIO14
  red_button: GPIO13
  pin_sprinkler_on: GPIO23
  pin_sprinkler_off: GPIO22
  battery_acquisition: GPIO39
  battery_acquisition_switch: GPIO25
  moisture_acquisition_switch: GPIO15
  default_deep_sleep_duration: 1min
  default_run_duration: 120min

globals:
 - id: default_irrigation_time #Used instead of irrigation_time when it result not a number. To optimize the code size could be embedded directly in the conditional check check
   type: double
   restore_value: no
   initial_value: '10'

esphome:
  name: irrigatore
  platform: ESP32
  board: esp-wrover-kit
#Custom component. to erase in the final version
#  includes:
#   - heapmon.h  
#  board_flash_mode: qio

  on_boot:
    priority: -100
    then:
      - logger.log: "Hello word!" #Just to test the on boot feature - I would perform on boot the battery voltage check prior to open the solenoid
      
###############################################################
#             WIFI - OTA and static IP  management            #   
###############################################################
wifi:
  networks:
  - ssid: xxx
    password: xxx



# Static IP
  manual_ip:
    static_ip: 192.168.1.30
    gateway: 192.168.1.1
    subnet: 255.255.255.0

# Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "xxx"
#    password: "xxx"

###############################################################
#                       WEB MANAGEMENT                        #   
###############################################################

ota:
web_server:
  port: 80

#Captive portal not usefull in my application
#captive_portal:


###############################################################
#                     LOGGER MANAGEMENT                       #   
###############################################################

# Logger configuration
logger:
  level: DEBUG
  logs:
    esp32_ble_tracker: ERROR
    adc: ERROR
    SWITCH: DEBUG
    xiaomi_hhccjcy01: ERROR
    xiaomi_ble: ERROR
    sensor: ERROR

###############################################################
#                       HOME ASSISTANT                        #   
###############################################################

# Enable Home Assistant API
api:
#This service will allow you to set the duration_of_irrigation variable via native API - the duration_of_irrigation variable will be used to define the irrigation time (remember the solenoid is a bistable one)
#To use this service the device must be awake
   services:
#Service Start Irrigation
     - service: start_irrigation
       variables:
         duration_of_irrigation_service: int
       then:
        - lambda: |-
             id(irrigation_time).state = duration_of_irrigation_service;

        - logger.log: 
            format: "******CALLED SERVICE START_IRRIGATION******"
            level: ERROR
        - delay: 5s
        - switch.toggle: watering_start

#Service Stop Irrigation
     - service: stop_irrigation
       variables:
         long_deep_sleep_time_service: int
       then:
        - lambda: |-
             id(long_deep_sleep_time).state = long_deep_sleep_time_service;
        - logger.log: 
            format: "******CALLED SERVICE STOP_IRRIGATION******"
            level: ERROR
        - delay: 5s
        - switch.toggle: watering_stop

#Service Battery health check
     - service: battery_health_check_on
       then:
        - switch.turn_on: power_supply_battery_sensor
     - service: battery_health_check_off
       then:
        - switch.turn_off: power_supply_battery_sensor


            
###############################################################
#                Bluetooth configuration                      #   
###############################################################
esp32_ble_tracker:


###############################################################
#                         SWITCH                              #   
###############################################################
switch:
  - platform: restart
    name: "Restart"
    
#######################################################################################################
#                                                                                                     #
#   .-'''-. .-------. .-------.   .-./`) ,---.   .--..--.   .--.    .---.       .-''-.  .-------.     #
#  / _     \\  _(`)_ \|  _ _   \  \ .-.')|    \  |  ||  | _/  /     | ,_|     .'_ _   \ |  _ _   \    #
# (`' )/`--'| (_ o._)|| ( ' )  |  / `-' \|  ,  \ |  || (`' ) /    ,-./  )    / ( ` )   '| ( ' )  |    #
#(_ o _).   |  (_,_) /|(_ o _) /   `-'`"`|  |\_ \|  ||(_ ()_)     \  '_ '`) . (_ o _)  ||(_ o _) /    #
# (_,_). '. |   '-.-' | (_,_).' __ .---. |  _( )_\  || (_,_)   __  > (_)  ) |  (_,_)___|| (_,_).' __  #
#.---.  \  :|   |     |  |\ \  |  ||   | | (_ o _)  ||  |\ \  |  |(  .  .-' '  \   .---.|  |\ \  |  | #
#\    `-'  ||   |     |  | \ `'   /|   | |  (_,_)\  ||  | \ `'   / `-'`-'|___\  `-'    /|  | \ `'   / #
# \       / /   )     |  |  \    / |   | |  |    |  ||  |  \    /   |        \\       / |  |  \    /  #
#  `-...-'  `---'     ''-'   `'-'  '---' '--'    '--'`--'   `'-'    `--------` `'-..-'  ''-'   `'-'   #
#                                                                                                     #
#######################################################################################################

#############################################################################
#                      SPRINKLER MANAGEMENT                                 #
#note:                                                                      # 
#To open the solenoid is enough one pulse (500ms) - negative voltage        #
#To close the solenoide are needed more than one pulse - positive voltage   #
#The solenoid is the one got from the acquauno device                       #
#Variables:                                                                 #
# irrigation_time --> from home assistant trough native API                 #
# default_irrigation_time  --> Global variables used instead of             #
# irrigation_time when it is nan                                            #
#############################################################################
###############################################################
#                   IRRIGATION START MANAGEMENT               #   
###############################################################
#switch:
  - platform: gpio
    pin: $pin_sprinkler_on
    id: switch1
  - platform: template
    name: "start watering"
    id: watering_start   
    icon: "mdi:sprinkler"
    turn_on_action:
    - logger.log: 
        format: "Action: Watering begins"
        level: ERROR
    #Start irrigation
    - switch.turn_on: switch1                #   _
    - delay: 500ms #negative pulse duration  # _| |_  -7v
    - switch.turn_off: switch1
    
    #Lambda filter checks if the sleep time is "not a number" if it is, the sleep duration will be setted to a default value
    - lambda: |-  
       if(isnan(id(irrigation_time).state))  
        {
            ESP_LOGE("Mymodule", "********* Error: Default irrigation time - The irrigation will last %.1f second  ********", id(default_irrigation_time)); 
             id(deep_sleep_23).set_sleep_duration(id(default_irrigation_time)*1000);

         }
        else
         {
             ESP_LOGE("Mymodule", "great! we are in the else branch!!!");
             ESP_LOGE("Mymodule", "********* The irrigation will last %.1f second  ********", id(irrigation_time).state);
             id(deep_sleep_23).set_sleep_duration(id(irrigation_time).state*1000);
         }


# Send the ESP32 in deep sleep for the duration of irrigation  
    - logger.log:
       format: "Going in deep sleep for the irrigation time" #---------- to be converted in minutes
       level: ERROR
    - delay: 3s #To erase, this delay is present to guarantee enough time to print previous messages prior to go in deep sleep
    - deep_sleep.enter:
        id: deep_sleep_23
        
###############################################################
#                   IRRIGATION ENDS MANAGEMENT                #   
###############################################################

  - platform: gpio
    pin: $pin_sprinkler_off
    id: switch2
  - platform: template
    name: "termina irrigazione"
    id: watering_stop
    icon: "mdi:flower-outline"
    turn_on_action:
    - logger.log:
       format: "Action:Irrigation ends" 
       level: ERROR
    
    #First pulse
    - switch.turn_on: switch2
    - delay: 500ms
    - switch.turn_off: switch2
    - delay: 500ms
    #Second puls
    - switch.turn_on: switch2
    - delay: 500ms
    - switch.turn_off: switch2
    - delay: 500ms
    #Third pulse
    - switch.turn_on: switch2
    - delay: 500ms
    - switch.turn_off: switch2
#                                                                      _    _     _
#three positive pulse to close the solenoid - duration 500 ms x 3  # _| |__| |_ _| |_   +7v

    - logger.log:
         format: "The sprinkler is going to sleep till to nex irrigation - WATERING STOP - DEBUG 60 seconds" 
         level: ERROR
    - lambda: |-
          id(deep_sleep_23).set_sleep_duration(id(long_deep_sleep_time).state*1000);
    - deep_sleep.enter:
        id: deep_sleep_23
#        sleep_duration: 60sec

###############################################################
#             MANAGEMENT OF ACQUISITION SWITCHES             #   
###############################################################

#Switch controllo sensori
  - platform: gpio
    pin: $moisture_acquisition_switch
    id: power_moisture_sensor
    name: "Moisture sensor"
    icon: "mdi:toggle-switch"
#Switch controllo sensori
  - platform: gpio
    pin: $battery_acquisition_switch
    id: power_supply_battery_sensor
    name: "supply battery sensor"
    icon: "mdi:toggle-switch"




###############################################################
#                  MANUAL IRRIGATION MANAGEMENT               #   
###############################################################

binary_sensor:
#Green button watering start
  - platform: gpio
    pin:
      number: $green_button
      mode: INPUT_PULLDOWN
      inverted: False
    filters:
      - delayed_on: 10ms
    name: "button start sprinkler"
    on_press:
      - switch.toggle: watering_start
      - logger.log: "button start sprinkler pressed"

#Red button watering stop    
  - platform: gpio
    pin:
      number: $red_button
      mode: INPUT_PULLDOWN
      inverted: False
    filters:
      - delayed_on: 10ms
    name: "button stop sprinkler"
    on_press:
      - switch.toggle: watering_stop
      - logger.log: "button stop sprrinkler pressed"#
      
#Status sensor

  - platform: status
    name: "Sprinkler Alive"


#################################################
#                 SENSOR                        #                 
#################################################
sensor:
#Custom component
#  - platform: heapmon
#    id: heapspace
#    name: "Free Space"
    
  - platform: homeassistant
    name: "irrigation time"
    entity_id: sensor.irrigation_time 
    id: irrigation_time
  - platform: homeassistant
    name: "long deep sleep time"
    entity_id: sensor.long_deep_sleep_time 
    id: long_deep_sleep_time


    
#################################################
#           ADC ACQUISITION MANAGEMENT          #                 
#################################################
#Acquisition of battery voltage - needed to check the residual charge
  - platform: adc
    pin: $battery_acquisition
    name: "Voltage supply battery"
    id: v_bat
    attenuation: 11db
    update_interval: 1s
    filters:
      - calibrate_linear:
          - 0.0 -> 0.0
          - 2.49 -> 2.74
          - 2.99 -> 2.68
          - 3.04 -> 2.71
          - 3.08 -> 2.74
          - 3.85 -> 3.14
      - median:
          window_size: 3
          send_every: 4
          send_first_at: 3
      - lambda: !lambda |-
          if ( x > 2 ) {
            return x;
          } else {
            return 0;
          }



#Acquisition of capacitive moisture sensor
  - platform: adc
    pin: GPIO34
    attenuation: 11db
##The goal of this filter is convert the measured value in a percentage value were 
## x is the value got from the ADC during the operation, 2.84 is the value got from the ADC when the sensor is immersed in water (full wet) and 1.67 is the value got from the ADC when the sensor in full dry 
 
    filters:
      - lambda: |-
          if (x > 2.84) {
            return 0;
          } else if (x < 1.67) {
            return 100;
          } else {
            return (2.84-x) / (2.84-1.67) * 100.0;
          }
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3          
    name: "Soil Moisture Level"
    update_interval: 1s
    icon: "mdi:water-percent"
    unit_of_measurement: "%"
    
#Gateway Plant sensors Xiaomi
  - platform: xiaomi_hhccjcy01
    mac_address: 'C4:7C:8D:6C:14:F9'
    temperature:
      name: "Temperatura camelia"
    moisture:
      name: "Umidità camelia"
    illuminance:
      name: "Luminosità camelia"
    conductivity:
      name: "Conduttività camelia"

#Wi-Fi signal strength
#  - platform: wifi_signal
#    name: sprinkler wifi signal power
#    id: wifi_signal_db
#    update_interval: 60s
    # on_raw_value:
      # then:
        # - text_sensor.template.publish:
            # id: wifi_signal_power_percentage
            # state: !lambda |-
              # int power = round(100*(1-((0-id(wifi_signal_db).raw_state)/(100))));
              # return (
                # (String(power) + " %")
              # ).c_str();

    

#Uptime sensor
#This sensor is useful during the development to check immediately if something strange happened but will be removed in the final firmware
#  - platform: uptime
#    name: Uptime Sensor
#    id: uptime_sensor
#    update_interval: 10s
#    on_raw_value:
#      then:
#        - text_sensor.template.publish:
#            id: uptime_human
#            state: !lambda |-
#              int seconds = round(id(uptime_sensor).raw_state);
#              int days = seconds / (24 * 3600);
#              seconds = seconds % (24 * 3600);
#              int hours = seconds / 3600;
#              seconds = seconds % 3600;
#              int minutes = seconds /  60;
#              seconds = seconds % 60;
#              return (
#               (days ? String(days) + "d " : "") +
#                (hours ? String(hours) + "h " : "") +
#                (minutes ? String(minutes) + "m " : "") +
#                (String(seconds) + "s")
#              ).c_str();
              
              
#This sensor is used during the development
#The status change from 1 to 0 is intercepted by an automation in "home assistant" who send me a message via telegram to inform that the board had a reset  
#  - platform: template
#    name: status
#    update_interval: 10s
#    id: status
#    lambda: !lambda |-
#            if(id(uptime_sensor).state >15){  
#              return 1;
#            }
#            else
#            {  
#              return 0;
#            }
    
# makes more easy to read the uptime sensor - example from ESPHOME web site
#text_sensor:
#  - platform: template
#    name: Uptime Human Readable
#    id: uptime_human
#    icon: mdi:clock-start

#  - platform: template
#    name: Wifi signal level (%)
#    id: wifi_signal_power_percentage
#    icon: mdi:Wifi

# Deep Sleep Feature. 
deep_sleep:
  run_duration: $default_run_duration
  sleep_duration: $default_deep_sleep_duration
  id: deep_sleep_23


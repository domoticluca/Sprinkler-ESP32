################################################################################
#                              Configurazione                                  #
#Pinout: https://circuits4you.com/wp-content/uploads/2018/12/ESP32-Pinout.jpg  #
#                                                                              #
################################################################################

substitutions:
  green_button: GPIO12
  red_button: GPIO13
  pin_sprinkler_on: GPIO23
  pin_sprinkler_off: GPIO22
  battery_acquisition: GPIO35
  battery_acquisition_switch: GPIO25
  
esphome:
  name: irrigatore
  platform: ESP32
  board: esp-wrover-kit
  
  on_boot:
    priority: -100
    then:
      - logger.log: "Hello word!"

###############################################################
#              GESTIONE WIFI OTA ED IP                        #   
###############################################################
wifi:
  networks:
  - ssid: xxx
    password: xxx
  - ssid: xxx
    password: xxx


# Static IP
  manual_ip:
    static_ip: 192.168.1.30
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sprinkler Fallback Hotspot"
    password: "xxx"
ota:
web_server:
  port: 80

captive_portal:


###############################################################
#                      GESTIONE LOGGER                        #   
###############################################################

# Enable logging
logger:
#  level: ERROR
#  logs:
#    esp32_ble_tracker: WARN
#    ADC: WARN
#    SWITCH: WARN
#    V_bat: WARN
#    xiaomi_hhccjcy01: ERROR

###############################################################
#                       HOME ASSISTANT                        #   
###############################################################

# Enable Home Assistant API
api:
#Servizio che permette da home assistant tramite mqtt di definire la variabile sleep time (passata da home assistant)
#Per usare questo servizio il device deve essere sveglio
   services:
     - service: set_sleep_time
       variables:
         sleep_time: float
       then:
        - lambda: |-
             id(sleeptime).state = sleep_time;

###############################################################
#                 Configurazione MQTT                         #   
###############################################################

mqtt:
  broker: 192.168.1.20
  port: 1883
  username: xxx
  password: xxx
  on_message:
    - topic: irrigatore/ota_mode #Previene il deep sleep in modo da poter effettuare l'ota
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_23
    - topic: irrigatore/sleep_mode #Invia il sistema in deep sleep   
      payload: 'ON'
      then:
        - deep_sleep.enter: deep_sleep_23

###############################################################
#              Configurazione Bluetooth                       #   
###############################################################
esp32_ble_tracker:


###############################################################
#                         SWITCH                              #   
###############################################################
switch:
  - platform: restart
    name: "Restart"
    
#######################################################################################################
#                                                                                                     #
#   .-'''-. .-------. .-------.   .-./`) ,---.   .--..--.   .--.    .---.       .-''-.  .-------.     #
#  / _     \\  _(`)_ \|  _ _   \  \ .-.')|    \  |  ||  | _/  /     | ,_|     .'_ _   \ |  _ _   \    #
# (`' )/`--'| (_ o._)|| ( ' )  |  / `-' \|  ,  \ |  || (`' ) /    ,-./  )    / ( ` )   '| ( ' )  |    #
#(_ o _).   |  (_,_) /|(_ o _) /   `-'`"`|  |\_ \|  ||(_ ()_)     \  '_ '`) . (_ o _)  ||(_ o _) /    #
# (_,_). '. |   '-.-' | (_,_).' __ .---. |  _( )_\  || (_,_)   __  > (_)  ) |  (_,_)___|| (_,_).' __  #
#.---.  \  :|   |     |  |\ \  |  ||   | | (_ o _)  ||  |\ \  |  |(  .  .-' '  \   .---.|  |\ \  |  | #
#\    `-'  ||   |     |  | \ `'   /|   | |  (_,_)\  ||  | \ `'   / `-'`-'|___\  `-'    /|  | \ `'   / #
# \       / /   )     |  |  \    / |   | |  |    |  ||  |  \    /   |        \\       / |  |  \    /  #
#  `-...-'  `---'     ''-'   `'-'  '---' '--'    '--'`--'   `'-'    `--------` `'-..-'  ''-'   `'-'   #
#                                                                                                     #
#######################################################################################################

###############################################################
#             GESTIONE COMANDI INIZIO IRRIGAZIONE             #   
###############################################################

#switch:
  - platform: gpio
    pin: $pin_sprinkler_on
    id: switch1
  - platform: template
    name: "inizia irrigazione"
    id: watering_start   
    icon: "mdi:sprinkler"
    turn_on_action:
    - logger.log: "action Inizia irrigazione"
    - switch.turn_on: switch1
    - delay: 500ms #Durata impulso negativo per aprire l'elettrovalvola ed iniziare l'irrigazione
    - switch.turn_off: switch1

    #Mando in deep sleep per tutta la durata dell'irrigazione
    - logger.log:
       format: "L'irrigazione durerà %.1f secondi "
       args: [ id(sleeptime).state ]
#      if(states('sensor.sleeptime') |char == nan)
#
    - lambda: |-  
       if(isnan(id(sleeptime).state))  
        {
            ESP_LOGD("Mymodule", "********* Status Unkown sleep time 1 second ********");
            id(deep_sleep_23).set_sleep_duration(1000);
        }
       else
        {
            ESP_LOGD("Mymodule", "********* ELSE ********");
            id(deep_sleep_23).set_sleep_duration(id(sleeptime).state*1000);
        }
#    - deep_sleep.enter: deep_sleep_23
          #  ESP_LOGD("Mymodule", "********* Status Unkown sleep time 1 second ********");

          # logger.log: "********* Status Unkown sleep time 1 second ********"
          #          logger.log:
          #            format: "ELSE L'irrigazione durerà %.1f secondi "
          #            args: [ id(sleeptime).state ]
        
###############################################################
#               GESTIONE COMANDI FINE IRRIGAZIONE             #   
###############################################################

  - platform: gpio
    pin: $pin_sprinkler_off
    id: switch2
  - platform: template
    name: "termina irrigazione"
    id: watering_stop
    icon: "mdi:flower-outline"
    turn_on_action:
    - logger.log: "action stop irrigazione"
#    - switch.turn_on: switch2
#    - delay: 500ms
#    - switch.turn_off: switch2
#    - delay: 500ms
#    - switch.turn_on: switch2
#    - delay: 500ms
#    - switch.turn_off: switch2 #Da questo impulso in poi probabilmente non serve dare altri impulsi per chiudere la valvola.
#    - delay: 500ms
#    - switch.turn_on: switch2
#    - delay: 500ms
#    - switch.turn_off: switch2
#    - delay: 500ms
    - logger.log:
         format: "entro in deep sleep per %.1f secondi "
         args: [ id(sleeptime).state ]

# #********************************#

#Switch controllo sensori
#  - platform: gpio
#    pin: GPIO15
#    id: power_moisture_sensor
#    name: "Moisture sensor"
#    icon: "mdi:toggle-switch"
#Switch controllo sensori
#  - platform: gpio
#    pin: $battery_acquisition_switch
#    id: power_supply_battery_sensor
#    name: "supply battery sensor"
#    icon: "mdi:toggle-switch"


###############################################################
#               GESTIONE MANUALE DELL'IRRIGAZIONE             #   
###############################################################

binary_sensor:
#tasto verde inizio irrigazione
  - platform: gpio
    pin:
      number: $green_button
      mode: INPUT_PULLDOWN
      inverted: False
    filters:
      - delayed_on: 10ms
    name: "button start sprinkler"
    on_press:
      - switch.toggle: watering_start
      - logger.log: "button start sprinkler pressed"

#tasto rosso inizio irrigazione      
  - platform: gpio
    pin:
      number: $red_button
      mode: INPUT_PULLDOWN
      inverted: False
    filters:
      - delayed_on: 10ms
    name: "button stop sprinkler"
    on_press:
      - switch.toggle: watering_stop
      - logger.log: "button stop sprinkler pressed"

#################################################
#                 SENSOR                        #                 
#################################################
sensor:
  - platform: homeassistant
    name: "sleeptime"
    entity_id: sensor.sleeptime 
    id: sleeptime
#ADC
#Acquisizione tensione batterie
#  - platform: adc
#    pin: $battery_acquisition
#    name: "Voltage supply battery"
#    id: V_bat
#    attenuation: 11db
#    update_interval: 5s
#    filters:
#      - calibrate_linear:
#          - 0.0 -> 0.0
#          - 3.6 -> 3.04
#      - median:
#          window_size: 7
#          send_every: 4
#          send_first_at: 3
#    icon: "mdi:battery-medium"

#Acquisizione Sensore pianta capacitivo
#  - platform: adc
#    pin: GPIO34
#    attenuation: 11db
#    filters:
#      - lambda: |-
#          if (x > 2.84) {
#            return 0;
#          } else if (x < 1.67) {
#            return 100;
#          } else {
#            return (2.84-x) / (2.84-1.67) * 100.0;
#          }
#      - median:
#          window_size: 7
#          send_every: 4
#          send_first_at: 3          
#    name: "Soil Moisture Level"
#    update_interval: 1s
#    icon: "mdi:water-percent"
#    unit_of_measurement: "%"
    
#Gateway Plant sensors Xiaomi
  - platform: xiaomi_hhccjcy01
    mac_address: 'C4:7C:8D:6C:14:F9'
    temperature:
      name: "Temperatura camelia"
    moisture:
      name: "Umidità camelia"
    illuminance:
      name: "Luminosità camelia"
    conductivity:
      name: "Conduttività camelia"

#Potenza del WIFI
  - platform: wifi_signal
    name: sprinkler wifi signal power
    id: wifi_signal_db
    update_interval: 60s
    # on_raw_value:
      # then:
        # - text_sensor.template.publish:
            # id: wifi_signal_power_percentage
            # state: !lambda |-
              # int power = round(100*(1-((0-id(wifi_signal_db).raw_state)/(100))));
              # return (
                # (String(power) + " %")
              # ).c_str();

    

#Uptime sensor
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 10s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
               (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
              
  - platform: template
    name: status
    update_interval: 10s
    id: status
    lambda: !lambda |-
            if(id(uptime_sensor).state >15){  
              return 1;
            }
            else
            {  
              return 0;
            }
    
# Example configuration entry
text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

  # - platform: template
    # name: Wifi signal level (%)
    # id: wifi_signal_power_percentage
    # icon: mdi:Wifi

# Deep Sleep. da settare correttamente
deep_sleep:
  run_duration: 120min
  sleep_duration: 1min
  id: deep_sleep_23


